import IonEngine.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

//                    ___           ___     
//        ___        /\  \         /\__\    
//       /\  \      /::\  \       /::|  |   
//       \:\  \    /:/\:\  \     /:|:|  |   
//       /::\__\  /:/  \:\  \   /:/|:|  |__ 
//    __/:/\/__/ /:/__/ \:\__\ /:/ |:| /\__\
//   /\/:/  /    \:\  \ /:/  / \/__|:|/:/  /
//   \::/__/      \:\  /:/  /      |:/:/  / 
//    \:\__\       \:\/:/  /       |::/  /  
//     \/__/        \::/  /        /:/  /   
//                   \/__/         \/__/    engine

public class Main {

    public static void main(String[] args)
    {
        IonFrame frame = new IonFrame();
        frame.setTitle("Ion");
        frame.setAlwaysOnTop(true);
        IonPanel panel = frame.addPanel();
        
        //Testing the first container
        IonContainer container = panel.addContainer(new IonContainer(500, 500, 10, 10), "container");
        container.changeBorder(2);

        IonRectangleObject rectangle = (IonRectangleObject)container.add(new IonRectangleObject(), "rectangle");
        rectangle.setBackgroundColor(Color.blue);
        rectangle.setZIndex(2);
        rectangle.setProperty("name", "Bob");

        container.add(new IonRectangleObject(), "rectangle2");
        ((IonRectangleObject)container.get("rectangle2")).setBackgroundColor(Color.green);
        ((IonRectangleObject)container.get("rectangle2")).setProperty("free", true);
        container.get("rectangle2").setProperty("name", "George");
        
        IonRectangleObject orangeSquare =  (IonRectangleObject)container.add(new IonRectangleObject(), "orangeSquare");
        orangeSquare.setBackgroundColor(Color.orange);
        
        container.addBehaviour(new IonDraggableBP());
        container.setPropertyToAllObjects("draggable", true);
        

        //Testing the second container
        IonContainer container2 = panel.addContainer();
        container2.add(new IonRectangleObject(100, 50, 0, 10), "bar").setProperty("draggable", true);
        container2.changeBorder(3);
        container2.addBehaviour(new IonDraggableBP());

        frame.setVisible(true);

        container.addBehaviour(new MyBP()).on();
        ((IonPhysicsBP)container.addBehaviour(new IonPhysicsBP())).setG(0.5).start();

        IonRunTimeConsole RTC = new IonRunTimeConsole(frame);
        RTC.start();
        RTC.addContainerAppended("container");
        RTC.addContainerAppended("container2");

        System.out.println("It works!!!");




    }


    
    
}

class MyBP extends IonBehaviourPack {
    public void keyEvent(KeyEvent e, String type) {
        switch(type) {
            case "pressed":
                if (e.getKeyChar() == 'd')
                {
                    HashMap map = super.getContainer().getObjectMap();
                    Set keys = map.keySet();
                    for (Object key: keys) {
                        ((IonObject)map.get(key)).moveBy(5, 0);
                    } 
                }
                else if (e.getKeyChar() == 'a') {
                    HashMap map = super.getContainer().getObjectMap();
                    Set keys = map.keySet();
                    for (Object key: keys) {
                        ((IonObject)map.get(key)).moveBy(-5, 0);
                    } 
                }
                else if (e.getKeyChar() == 'w') {
                    HashMap map = super.getContainer().getObjectMap();
                    Set keys = map.keySet();
                    for (Object key: keys) {
                        ((IonObject)map.get(key)).moveBy(0, -10);
                    } 
                }
                else if (e.getKeyChar() == 's') {
                    HashMap map = super.getContainer().getObjectMap();
                    Set keys = map.keySet();
                    for (Object key: keys) {
                        ((IonObject)map.get(key)).moveBy(0, 5);
                    } 
                }
                return;
        }
    }
}